---
description:
globs:
alwaysApply: false
---
# Contributing Guidelines

## Code Organization Principles

### File Structure Conventions
- **Mirrored Testing**: All source files in `src/` should have corresponding tests in `tests/`
- **Route Modularity**: API routes are organized by version and functionality in `src/routes/`
- **Storage Abstraction**: New storage backends should implement [src/storage/interface.d.ts](mdc:src/storage/interface.d.ts)
- **Utility Functions**: Shared utilities go in `src/utils/`

### Naming Conventions
- Use kebab-case for file names (e.g., `delete-old-cache.ts`)
- Use PascalCase for classes and types
- Use camelCase for variables and functions
- Use SCREAMING_SNAKE_CASE for environment variables

## Development Best Practices

### Adding New Storage Backends
1. Create implementation file in `src/storage/` that implements `StorageInterface`
2. Add initialization logic to [src/storage/storage-manager.ts](mdc:src/storage/storage-manager.ts)
3. Add corresponding test file in `tests/storage/`
4. Update [wrangler.jsonc](mdc:wrangler.jsonc) with required bindings

### Adding New API Routes
1. Create route handler in appropriate `src/routes/` subdirectory
2. Use Valibot for request/response validation
3. Add route to main app in [src/routes/index.ts](mdc:src/routes/index.ts)
4. Create comprehensive tests in `tests/routes/`
5. Ensure proper error handling and status codes

### Environment Configuration
- Add new environment variables to [wrangler.jsonc](mdc:wrangler.jsonc)
- Update `Env` type in [src/index.ts](mdc:src/index.ts)
- Document required vs optional variables
- Use Wrangler secrets for sensitive values (`wrangler secret put`)

## Testing Requirements

### Test Coverage
- **Minimum 90% coverage** for all new code
- Unit tests for all business logic
- Integration tests for API endpoints
- Mocking for external dependencies (R2, KV)

### Test Patterns
```typescript
// Use descriptive test names
describe('StorageManager', () => {
  it('should prefer KV over R2 when both are available', () => {
    // Test implementation
  });
});

// Mock Cloudflare bindings consistently
const mockR2 = {
  get: vi.fn(),
  put: vi.fn(),
  delete: vi.fn(),
  list: vi.fn(),
};
```

### Running Tests
Always run tests before committing:
```bash
pnpm test          # Full test suite with coverage
pnpm typecheck     # TypeScript validation
pnpm lint          # Code quality checks
```

## Code Quality Standards

### TypeScript Guidelines
- Use strict TypeScript configuration
- Define explicit return types for public functions
- Leverage type inference for simple cases
- Use branded types for identifiers when appropriate

### Error Handling
- Use `HTTPException` for API errors with proper status codes
- Implement custom error classes when needed (see `InvalidStorageError`)
- Always handle Promise rejections
- Log errors appropriately for debugging

### Performance Considerations
- Use streaming for large objects in storage operations
- Implement proper caching headers for API responses
- Consider memory usage when processing large artifacts
- Use batch operations when possible

## Documentation Standards

### Code Documentation
- Add JSDoc comments for public APIs
- Include usage examples for complex functions
- Document environment variables and their purposes
- Keep README and docs in sync with code changes

### API Documentation
- Document all endpoint parameters and responses
- Include error response formats
- Provide curl examples for testing
- Update [docs/](mdc:docs) when adding new features

## Deployment and Release

### Pre-deployment Checklist
1. All tests passing (`pnpm test`)
2. No TypeScript errors (`pnpm typecheck`)
3. Code properly formatted (`pnpm format`)
4. No linting violations (`pnpm lint`)
5. Documentation updated if needed

### Version Management
- Follow semantic versioning
- Update [CHANGELOG.md](mdc:CHANGELOG.md) for all changes
- Use changesets for version bumps (`@changesets/cli`)
- Tag releases appropriately

### Environment Promotion
- Test in development environment first
- Verify all environment variables are configured
- Check storage bindings are properly set up
- Monitor logs after deployment
