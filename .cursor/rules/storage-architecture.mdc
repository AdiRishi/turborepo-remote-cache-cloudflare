---
description:
globs:
alwaysApply: false
---
# Storage Architecture Guide

## Storage Abstraction Layer
The project uses a pluggable storage architecture that supports multiple backends through a common interface defined in [src/storage/interface.d.ts](mdc:src/storage/interface.d.ts).

## Storage Interface
All storage implementations must implement the `StorageInterface` which provides:
- `listWithMetadata()` / `list()` - List objects with optional metadata
- `readWithMetadata()` / `read()` - Read objects with optional metadata
- `write()` - Write objects with optional custom metadata
- `delete()` - Delete single or multiple objects

## Storage Manager
[src/storage/storage-manager.ts](mdc:src/storage/storage-manager.ts) is the central coordinator that:
- Initializes available storage backends based on environment bindings
- Selects which storage to use (KV takes priority over R2)
- Provides utility methods for stream conversion
- Throws `InvalidStorageError` if no storage is configured

## Storage Backends

### R2 Storage
[src/storage/r2-storage.ts](mdc:src/storage/r2-storage.ts) - Cloudflare R2 object storage implementation
- Best for large artifacts and long-term storage
- Configured via `R2_STORE` binding in [wrangler.jsonc](mdc:wrangler.jsonc)
- Supports custom metadata and automatic expiration

### KV Storage
[src/storage/kv-storage.ts](mdc:src/storage/kv-storage.ts) - Cloudflare KV implementation
- Better for smaller artifacts with faster access
- Has size limitations (25MB per value)
- Configured via `KV_STORE` binding in [wrangler.jsonc](mdc:wrangler.jsonc)
- Uses `BUCKET_OBJECT_EXPIRATION_HOURS` for TTL

## Storage Selection Priority
1. If KV is available, it takes priority
2. Falls back to R2 if KV is not configured
3. Throws error if neither is available

## Environment Configuration
Storage backends are configured through Cloudflare Workers bindings:
- `R2_STORE` - R2 bucket binding name
- `KV_STORE` - KV namespace binding name
- `BUCKET_OBJECT_EXPIRATION_HOURS` - TTL for cached objects

## Testing Storage
Storage implementations have comprehensive tests in:
- [tests/storage/r2-storage.test.ts](mdc:tests/storage/r2-storage.test.ts)
- [tests/storage/kv-storage.test.ts](mdc:tests/storage/kv-storage.test.ts)
- [tests/storage/storage-manager.test.ts](mdc:tests/storage/storage-manager.test.ts)
